data_mixins:
  station:
    class: StationMixin
    fields:
      station:
        type: "@django.ForeignKey"
        relation: station
        options:
          "null": true
          on_delete: "@django.PROTECT"
          editable: false

data_base:
  station:
    # Every model (usually) based on resource
    class: StationBase
    base: resource
    mixins: [station]
    id_fields: [number]
    meta:
      # Number alone probably unique, demonstrate compound key
      unique_together: [number, name]
      # Updates must define station
      scope: station

data:
  # Actual data models turned into tables
  # Fields 'name', 'id', 'updated', 'created' implicitly
  # created by base resource (id/updated/created internal)
  station:
    class: Station
    # Environment extends resource in Zimagi core
    base: environment
    # Primary key (not necessarily externally facing)
    id_fields: [number, name]
    # Unique identifier within the scope
    key: number
    roles:
      # Redundant to specify 'admin'
      edit: [noaa-admin, admin]
      # Editors are automatically viewers
      # Public does not require authentication
      # (viewer will authenticate if public were not listed)
      view: [viewer, public]
    fields:
      number:
        type: "@django.CharField"
        options:
          "null": false
          max_length: 255
          # editable is default (not specified)
      lat:
        # In degrees
        type: "@django.FloatField"
        options:
          "null": true
      lon:
        type: "@django.FloatField"
        options:
          "null": true
      elevation:
        # In meters
        type: "@django.FloatField"
        options:
          "null": true
    meta:
      unique_together: [number, name]
      # Display ordered by elevation and number
      ordering: [elevation, number]
      # Fuzzy string search
      search_fields: [number, name]

command_mixins:
  # Generate methods on other classes
  station:
    class: StationCommandMixin
    meta:
      # Name used in commands (not required to be same as table)
      # Ref: mixin_name
      station:
        # Link back to dynamic class station
        data: station
        # Positive integer (lowest is highest priority)
        priority: 1

command_base:
  # Define a base command with settings
  # Same name as data model by convention, not requirement
  station_base:
    class: StationCommandBase
    mixins: [station]
    # Accessible via the API
    server_enabled: true
    # Only these groups can use 'station' commands
    groups_allowed: [noaa-admin]

command:
  station:
    # Maps back to data object
    resource: station
    base: station_base
    # Show later than core commands
    priority: 99
    groups_allowed: [noaa-admin, admin]

  # Alternate command (does same thing to demonstrate)
  bahnhof:
    # Maps back to data object
    resource: station
    base: station_base
    # Tie into object type (to match prefix for mixin)
    # I.e. match ref mixin_name
    base_name: station
    # Show later than core commands
    priority: 98
